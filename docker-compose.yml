version: '3.9'
name: my_project

services:
  npm_installer:
    restart: 'no'
    image: node:20.13.0-alpine3.18
    working_dir: /src
    command:
      [
        'sh',
        '-cx',
        "corepack enable && corepack pnpm i && chmod -R 777 .pnpm-store && find . -name 'node_modules' -type d -prune -exec chmod -R 777 '{}' +"
      ]
    volumes:
      - ./:/src:rw
  # nginx:
  #   image: nginx
  #   restart: 'no'
  #   ports:
  #     - 80:80
  #     - 443:443
  #     - 24678:24678
  #   environment:
  #     - ROOT_URL=${ROOT_URL}
  #   volumes:
  #     - ./configs/nginx/dev.conf:/etc/nginx/nginx.conf
  #     - ./configs/tls:/tls:ro
  caddy:
    image: caddy
    restart: 'no'
    ports:
      - 80:80
      - 443:443
      - 24678:24678
    environment:
      - ROOT_URL=${ROOT_URL}
    volumes:
      - ./configs/caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./configs/tls:/tls:ro

  website:
    restart: 'no'
    image: node:20.13.0-alpine3.18
    working_dir: /src
    command: ['sh', '-cx', 'cd /src/apps/website && npm run dev']
    environment:
      - PORT=80
      - INTERNAL_API_URL=http://backend:80
    volumes:
      - ./:/src:rw
    depends_on:
      npm_installer:
        condition: service_completed_successfully

  backend:
    restart: 'no'
    image: node:20.13.0-alpine3.18
    working_dir: /src
    command: ['sh', '-cx', 'cd /src/apps/backend && npm run dev']
    environment:
      - PORT=80
      - DATABASE_URL=postgres://app_backend_user:app_backend_pass@postgres:5432/app_backend
      - AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}
      - AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}
      - AUTH_SECRET=${AUTH_SECRET}
    volumes:
      - ./:/src:rw
    depends_on:
      npm_installer:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'busybox', 'wget', '--spider', 'http://localhost/docs-json']
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 20s

  api-client-generator:
    restart: 'no'
    build:
      context: ./packages/api-client
      dockerfile: Dockerfile.dev
    working_dir: /src
    volumes:
      - ./:/src:rw
    depends_on:
      npm_installer:
        condition: service_completed_successfully
      backend:
        condition: service_healthy

  postgres:
    restart: 'no'
    image: postgres:13.2
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_MULTIPLE_DATABASES: app_backend,app_backend_user,app_backend_pass;
    volumes:
      - pg_db_data:/var/lib/postgresql/data/
      - ./configs/pgsql/docker_pg_init.sh:/docker-entrypoint-initdb.d/docker_pg_init.sh
    healthcheck:
      test: pg_isready -U app_backend_user -d app_backend
      interval: 5s
      timeout: 5s
      retries: 100

  dbeaver:
    container_name: dbeaver
    image: dbeaver/cloudbeaver
    volumes:
      - ./.dbeaver-workspace:/opt/cloudbeaver/workspace
      - ./configs/dbeaver/cloudbeaver.conf:/opt/cloudbeaver/conf/cloudbeaver.conf
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      options:
        max-size: 50m

volumes:
  pg_db_data:
